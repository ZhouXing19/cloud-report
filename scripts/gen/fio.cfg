[global]
# Use threads when numjobs > 0
thread=1
# Async/direct IO
ioengine=libaio
direct=1
# Keep the suspense going; do not help w/ fadvise
fadvise_hint=0
# Report combined statistics when numjobs>1
group_reporting=1
randrepeat=0
verify=0
# By default, time based jobs, 1 minute each
time_based=1
runtime=2m
ramp_time=2s
size=100%
random_generator=tausworthe64

# Note: --filename must be specified on command line.

[fill-disk-ignore]  # Do not report job results
rw=randwrite
bs=128K
time_based=0
iodepth=256
stonewall

[wr-bw]
rw=write
bs=1M
iodepth=${IODEPTH_BW}
numjobs=8
offset_increment=${OFFSET}
stonewall

[wr-iops]
rw=randwrite
bs=4k
iodepth=${IODEPTH_IOPS}
stonewall

[wr-iops-tpcc]
rw=randwrite
bssplit=4k/70:8k/20:12k/3:16k/1:20k/1:24k/1:28k/1:32k/1:36k/1:44k/1
iodepth=${IODEPTH_IOPS}
stonewall

[wr-iops-tpcc-fsync]
rw=randwrite
# use buffered IO to benchmark fsync
direct=0
bs=4k
# fsync after every 512KB written
fsync=128
iodepth=${IODEPTH_IOPS}
stonewall

[wr-latency]
rw=randwrite
bs=4k
iodepth=${IODEPTH_LATENCY}
stonewall

[rd-bw]
rw=read
bs=1M
iodepth=${IODEPTH_BW}
numjobs=8
offset_increment=${OFFSET}
stonewall

[rd-iops]
rw=randread
numjobs=4
bs=4k
iodepth=${IODEPTH_IOPS}
stonewall

[rd-iops-tpcc]
rw=randread
numjobs=4
bssplit=8k/28:12k/23:4k/23:16k/7:20k/2:32k/17
iodepth=${IODEPTH_IOPS}
stonewall

[rd-latency]
rw=randread
bs=4k
iodepth=${IODEPTH_LATENCY}
stonewall

[rd-wr-iops-tpcc]
rw=randrw
numjobs=4
# N.B. read distribution preceeds write distribution (same as rd-iops-tpcc and wr-iops-tpcc, respectively).
bssplit=8k/28:12k/23:4k/23:16k/7:20k/2:32k/17,4k/70:8k/20:12k/3:16k/1:20k/1:24k/1:28k/1:32k/1:36k/1:44k/1
iodepth=${IODEPTH_IOPS}
stonewall
